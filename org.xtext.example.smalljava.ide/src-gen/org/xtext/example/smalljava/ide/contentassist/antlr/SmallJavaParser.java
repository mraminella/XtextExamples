/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.smalljava.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.smalljava.ide.contentassist.antlr.internal.InternalSmallJavaParser;
import org.xtext.example.smalljava.services.SmallJavaGrammarAccess;

public class SmallJavaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmallJavaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmallJavaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSJMemberAccess().getAlternatives(), "rule__SJMember__Alternatives");
			builder.put(grammarAccess.getSJStatementAccess().getAlternatives(), "rule__SJStatement__Alternatives");
			builder.put(grammarAccess.getSJIfBlockAccess().getAlternatives(), "rule__SJIfBlock__Alternatives");
			builder.put(grammarAccess.getSJSymbolAccess().getAlternatives(), "rule__SJSymbol__Alternatives");
			builder.put(grammarAccess.getSJNamedElementAccess().getAlternatives(), "rule__SJNamedElement__Alternatives");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getAlternatives(), "rule__SJTerminalExpression__Alternatives");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getValueAlternatives_2_1_0(), "rule__SJTerminalExpression__ValueAlternatives_2_1_0");
			builder.put(grammarAccess.getSJClassAccess().getGroup(), "rule__SJClass__Group__0");
			builder.put(grammarAccess.getSJClassAccess().getGroup_2(), "rule__SJClass__Group_2__0");
			builder.put(grammarAccess.getSJTypedDeclarationAccess().getGroup(), "rule__SJTypedDeclaration__Group__0");
			builder.put(grammarAccess.getSJFieldAccess().getGroup(), "rule__SJField__Group__0");
			builder.put(grammarAccess.getSJMethodAccess().getGroup(), "rule__SJMethod__Group__0");
			builder.put(grammarAccess.getSJMethodAccess().getGroup_2(), "rule__SJMethod__Group_2__0");
			builder.put(grammarAccess.getSJMethodAccess().getGroup_2_1(), "rule__SJMethod__Group_2_1__0");
			builder.put(grammarAccess.getSJBlockAccess().getGroup(), "rule__SJBlock__Group__0");
			builder.put(grammarAccess.getSJStatementAccess().getGroup_2(), "rule__SJStatement__Group_2__0");
			builder.put(grammarAccess.getSJReturnAccess().getGroup(), "rule__SJReturn__Group__0");
			builder.put(grammarAccess.getSJVariableDeclarationAccess().getGroup(), "rule__SJVariableDeclaration__Group__0");
			builder.put(grammarAccess.getSJIfStatementAccess().getGroup(), "rule__SJIfStatement__Group__0");
			builder.put(grammarAccess.getSJIfStatementAccess().getGroup_5(), "rule__SJIfStatement__Group_5__0");
			builder.put(grammarAccess.getSJAssignmentAccess().getGroup(), "rule__SJAssignment__Group__0");
			builder.put(grammarAccess.getSJAssignmentAccess().getGroup_1(), "rule__SJAssignment__Group_1__0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getGroup(), "rule__SJSelectionExpression__Group__0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getGroup_1(), "rule__SJSelectionExpression__Group_1__0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getGroup_1_3(), "rule__SJSelectionExpression__Group_1_3__0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getGroup_1_3_1(), "rule__SJSelectionExpression__Group_1_3_1__0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getGroup_1_3_1_1(), "rule__SJSelectionExpression__Group_1_3_1_1__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_0(), "rule__SJTerminalExpression__Group_0__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_1(), "rule__SJTerminalExpression__Group_1__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_2(), "rule__SJTerminalExpression__Group_2__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_3(), "rule__SJTerminalExpression__Group_3__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_4(), "rule__SJTerminalExpression__Group_4__0");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getGroup_5(), "rule__SJTerminalExpression__Group_5__0");
			builder.put(grammarAccess.getSJProgramAccess().getClassesAssignment(), "rule__SJProgram__ClassesAssignment");
			builder.put(grammarAccess.getSJClassAccess().getNameAssignment_1(), "rule__SJClass__NameAssignment_1");
			builder.put(grammarAccess.getSJClassAccess().getSuperclassAssignment_2_1(), "rule__SJClass__SuperclassAssignment_2_1");
			builder.put(grammarAccess.getSJClassAccess().getMembersAssignment_4(), "rule__SJClass__MembersAssignment_4");
			builder.put(grammarAccess.getSJTypedDeclarationAccess().getTypeAssignment_0(), "rule__SJTypedDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getSJTypedDeclarationAccess().getNameAssignment_1(), "rule__SJTypedDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getSJMethodAccess().getParamsAssignment_2_0(), "rule__SJMethod__ParamsAssignment_2_0");
			builder.put(grammarAccess.getSJMethodAccess().getParamsAssignment_2_1_1(), "rule__SJMethod__ParamsAssignment_2_1_1");
			builder.put(grammarAccess.getSJMethodAccess().getBodyAssignment_4(), "rule__SJMethod__BodyAssignment_4");
			builder.put(grammarAccess.getSJBlockAccess().getStatementsAssignment_2(), "rule__SJBlock__StatementsAssignment_2");
			builder.put(grammarAccess.getSJReturnAccess().getExpressionAssignment_1(), "rule__SJReturn__ExpressionAssignment_1");
			builder.put(grammarAccess.getSJVariableDeclarationAccess().getExpressionAssignment_2(), "rule__SJVariableDeclaration__ExpressionAssignment_2");
			builder.put(grammarAccess.getSJIfStatementAccess().getExpressionAssignment_2(), "rule__SJIfStatement__ExpressionAssignment_2");
			builder.put(grammarAccess.getSJIfStatementAccess().getThenBlockAssignment_4(), "rule__SJIfStatement__ThenBlockAssignment_4");
			builder.put(grammarAccess.getSJIfStatementAccess().getElseBlockAssignment_5_1(), "rule__SJIfStatement__ElseBlockAssignment_5_1");
			builder.put(grammarAccess.getSJIfBlockAccess().getStatementsAssignment_0(), "rule__SJIfBlock__StatementsAssignment_0");
			builder.put(grammarAccess.getSJAssignmentAccess().getRightAssignment_1_2(), "rule__SJAssignment__RightAssignment_1_2");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getMemberAssignment_1_2(), "rule__SJSelectionExpression__MemberAssignment_1_2");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getMethodinvocationAssignment_1_3_0(), "rule__SJSelectionExpression__MethodinvocationAssignment_1_3_0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getArgsAssignment_1_3_1_0(), "rule__SJSelectionExpression__ArgsAssignment_1_3_1_0");
			builder.put(grammarAccess.getSJSelectionExpressionAccess().getArgsAssignment_1_3_1_1_1(), "rule__SJSelectionExpression__ArgsAssignment_1_3_1_1_1");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getValueAssignment_2_1(), "rule__SJTerminalExpression__ValueAssignment_2_1");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getSymbolAssignment_3_1(), "rule__SJTerminalExpression__SymbolAssignment_3_1");
			builder.put(grammarAccess.getSJTerminalExpressionAccess().getTypeAssignment_4_2(), "rule__SJTerminalExpression__TypeAssignment_4_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmallJavaGrammarAccess grammarAccess;

	@Override
	protected InternalSmallJavaParser createParser() {
		InternalSmallJavaParser result = new InternalSmallJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmallJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmallJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
