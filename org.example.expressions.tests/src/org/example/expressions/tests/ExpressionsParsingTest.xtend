/*
 * generated by Xtext 2.13.0
 */
package org.example.expressions.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.expressions.expressions.ExpressionsModel
import static extension org.junit.Assert.*
import org.junit.Test
import org.junit.runner.RunWith
import org.example.expressions.expressions.IntConstant
import org.example.expressions.expressions.Expression
import org.example.expressions.expressions.Plus
import org.example.expressions.expressions.Minus
import org.example.expressions.expressions.MulOrDiv
import org.example.expressions.expressions.StringConstant
import org.example.expressions.expressions.BoolConstant
import org.example.expressions.expressions.VariableRef

@RunWith(XtextRunner)
@InjectWith(ExpressionsInjectorProvider)
class ExpressionsParsingTest {
	@Inject extension ParseHelper<ExpressionsModel> 			

	
	@Test
	def void testParenthesis() {
		"eval (10)".parse.elements.get(0) as IntConstant
	}

	@Test
	def void testPlus() {
		"10 + 5 + 1 + 2".assertRepr("(((10 + 5) + 1) + 2)")
	}
	
	@Test def void testPlusWithParenthesis() {
		"( 10 + 5 ) + ( 1 + 2 )".assertRepr("((10 + 5) + (1 + 2))")
	}
	
		
	@Test
	def void testPlusMulPrecedence(){
		"10 + 5 * 2 - 5 / 1".assertRepr("((10 + (5 * 2)) - (5 / 1))")
	}
	
	def String stringRepr(Expression e) {
		switch (e) {
			Plus:
			'''(«e.left.stringRepr» + «e.right.stringRepr»)'''
			Minus:
			'''(«e.left.stringRepr» - «e.right.stringRepr»)'''
			MulOrDiv:
			'''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			IntConstant: '''«e.value»'''
			StringConstant: '''«e.value»'''
			BoolConstant: '''«e.value»'''
			VariableRef: '''«e.variable.name»'''
		}
	}
	
	def assertRepr(CharSequence input, CharSequence expected) {
		("eval " + input).parse => [
			// assertNoErrors;
			expected.assertEquals(
				elements.last.expression.stringRepr
			)
		]
	}
}
