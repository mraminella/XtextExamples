/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.smalljava.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SJProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJProgram");
		private final Assignment cClassesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassesSJClassParserRuleCall_0 = (RuleCall)cClassesAssignment.eContents().get(0);
		
		//SJProgram:
		//	classes+=SJClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//classes+=SJClass*
		public Assignment getClassesAssignment() { return cClassesAssignment; }
		
		//SJClass
		public RuleCall getClassesSJClassParserRuleCall_0() { return cClassesSJClassParserRuleCall_0; }
	}
	public class SJClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassSJClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassSJClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperclassSJClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersSJMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SJClass:
		//	'class' name=ID ('extends' superclass=[SJClass])?
		//	'{' members+=SJMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' superclass=[SJClass])? '{' members+=SJMember* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superclass=[SJClass])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superclass=[SJClass]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }
		
		//[SJClass]
		public CrossReference getSuperclassSJClassCrossReference_2_1_0() { return cSuperclassSJClassCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperclassSJClassIDTerminalRuleCall_2_1_0_1() { return cSuperclassSJClassIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//members+=SJMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }
		
		//SJMember
		public RuleCall getMembersSJMemberParserRuleCall_4_0() { return cMembersSJMemberParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SJMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJMember:
		//	SJField | SJMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//SJField | SJMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SJField
		public RuleCall getSJFieldParserRuleCall_0() { return cSJFieldParserRuleCall_0; }
		
		//SJMethod
		public RuleCall getSJMethodParserRuleCall_1() { return cSJMethodParserRuleCall_1; }
	}
	public class SJTypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJTypedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSJClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSJClassIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeSJClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//fragment SJTypedDeclaration *:
		//	type=[SJClass] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SJClass] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[SJClass]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SJClass]
		public CrossReference getTypeSJClassCrossReference_0_0() { return cTypeSJClassCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSJClassIDTerminalRuleCall_0_0_1() { return cTypeSJClassIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SJFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJTypedDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SJField:
		//	SJTypedDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//SJTypedDeclaration ';'
		public Group getGroup() { return cGroup; }
		
		//SJTypedDeclaration
		public RuleCall getSJTypedDeclarationParserRuleCall_0() { return cSJTypedDeclarationParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SJMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJTypedDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsSJParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsSJParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodySJBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//SJMethod:
		//	SJTypedDeclaration
		//	'(' (params+=SJParameter (',' params+=SJParameter)*)?
		//	')' body=SJBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//SJTypedDeclaration '(' (params+=SJParameter (',' params+=SJParameter)*)? ')' body=SJBlock
		public Group getGroup() { return cGroup; }
		
		//SJTypedDeclaration
		public RuleCall getSJTypedDeclarationParserRuleCall_0() { return cSJTypedDeclarationParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=SJParameter (',' params+=SJParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=SJParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//SJParameter
		public RuleCall getParamsSJParameterParserRuleCall_2_0_0() { return cParamsSJParameterParserRuleCall_2_0_0; }
		
		//(',' params+=SJParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=SJParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//SJParameter
		public RuleCall getParamsSJParameterParserRuleCall_2_1_1_0() { return cParamsSJParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=SJBlock
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//SJBlock
		public RuleCall getBodySJBlockParserRuleCall_4_0() { return cBodySJBlockParserRuleCall_4_0; }
	}
	public class SJParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJParameter");
		private final RuleCall cSJTypedDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SJParameter:
		//	SJTypedDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//SJTypedDeclaration
		public RuleCall getSJTypedDeclarationParserRuleCall() { return cSJTypedDeclarationParserRuleCall; }
	}
	public class SJBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSJBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsSJStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SJBlock:
		//	{SJBlock} '{' statements+=SJStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SJBlock} '{' statements+=SJStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{SJBlock}
		public Action getSJBlockAction_0() { return cSJBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=SJStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//SJStatement
		public RuleCall getStatementsSJStatementParserRuleCall_2_0() { return cStatementsSJStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SJStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSJExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cSJIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SJStatement:
		//	SJVariableDeclaration | SJReturn | SJExpression ';' | SJIfStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//SJVariableDeclaration | SJReturn | SJExpression ';' | SJIfStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SJVariableDeclaration
		public RuleCall getSJVariableDeclarationParserRuleCall_0() { return cSJVariableDeclarationParserRuleCall_0; }
		
		//SJReturn
		public RuleCall getSJReturnParserRuleCall_1() { return cSJReturnParserRuleCall_1; }
		
		//SJExpression ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//SJExpression
		public RuleCall getSJExpressionParserRuleCall_2_0() { return cSJExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//SJIfStatement
		public RuleCall getSJIfStatementParserRuleCall_3() { return cSJIfStatementParserRuleCall_3; }
	}
	public class SJReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSJExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SJReturn:
		//	'return' expression=SJExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=SJExpression ';'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=SJExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_1_0() { return cExpressionSJExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SJVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJTypedDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSJExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SJVariableDeclaration:
		//	SJTypedDeclaration '=' expression=SJExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//SJTypedDeclaration '=' expression=SJExpression ';'
		public Group getGroup() { return cGroup; }
		
		//SJTypedDeclaration
		public RuleCall getSJTypedDeclarationParserRuleCall_0() { return cSJTypedDeclarationParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=SJExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_2_0() { return cExpressionSJExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SJIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSJExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockSJIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockSJIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//SJIfStatement:
		//	'if' '(' expression=SJExpression ')' thenBlock=SJIfBlock (=> 'else' elseBlock=SJIfBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=SJExpression ')' thenBlock=SJIfBlock (=> 'else' elseBlock=SJIfBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=SJExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//SJExpression
		public RuleCall getExpressionSJExpressionParserRuleCall_2_0() { return cExpressionSJExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=SJIfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//SJIfBlock
		public RuleCall getThenBlockSJIfBlockParserRuleCall_4_0() { return cThenBlockSJIfBlockParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=SJIfBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=SJIfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//SJIfBlock
		public RuleCall getElseBlockSJIfBlockParserRuleCall_5_1_0() { return cElseBlockSJIfBlockParserRuleCall_5_1_0; }
	}
	public class SJIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJIfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsSJStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cSJBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJIfBlock SJBlock:
		//	statements+=SJStatement
		//	| SJBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=SJStatement | SJBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statements+=SJStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//SJStatement
		public RuleCall getStatementsSJStatementParserRuleCall_0_0() { return cStatementsSJStatementParserRuleCall_0_0; }
		
		//SJBlock
		public RuleCall getSJBlockParserRuleCall_1() { return cSJBlockParserRuleCall_1; }
	}
	public class SJSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SJSymbol:
		//	SJVariableDeclaration | SJParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//SJVariableDeclaration | SJParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SJVariableDeclaration
		public RuleCall getSJVariableDeclarationParserRuleCall_0() { return cSJVariableDeclarationParserRuleCall_0; }
		
		//SJParameter
		public RuleCall getSJParameterParserRuleCall_1() { return cSJParameterParserRuleCall_1; }
	}
	public class SJNamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJNamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSJClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSJSymbolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SJNamedElement:
		//	SJClass | SJMember | SJSymbol;
		@Override public ParserRule getRule() { return rule; }
		
		//SJClass | SJMember | SJSymbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SJClass
		public RuleCall getSJClassParserRuleCall_0() { return cSJClassParserRuleCall_0; }
		
		//SJMember
		public RuleCall getSJMemberParserRuleCall_1() { return cSJMemberParserRuleCall_1; }
		
		//SJSymbol
		public RuleCall getSJSymbolParserRuleCall_2() { return cSJSymbolParserRuleCall_2; }
	}
	public class SJExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJExpression");
		private final RuleCall cSJAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SJExpression:
		//	SJAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//SJAssignment
		public RuleCall getSJAssignmentParserRuleCall() { return cSJAssignmentParserRuleCall; }
	}
	public class SJAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSJAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSJExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SJAssignment SJExpression:
		//	SJSelectionExpression ({SJAssignment.left=current} '=' right=SJExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//SJSelectionExpression ({SJAssignment.left=current} '=' right=SJExpression)?
		public Group getGroup() { return cGroup; }
		
		//SJSelectionExpression
		public RuleCall getSJSelectionExpressionParserRuleCall_0() { return cSJSelectionExpressionParserRuleCall_0; }
		
		//({SJAssignment.left=current} '=' right=SJExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SJAssignment.left=current}
		public Action getSJAssignmentLeftAction_1_0() { return cSJAssignmentLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=SJExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SJExpression
		public RuleCall getRightSJExpressionParserRuleCall_1_2_0() { return cRightSJExpressionParserRuleCall_1_2_0; }
	}
	public class SJSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSJTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSJMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberSJMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberSJMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberSJMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cMethodinvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cMethodinvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsSJExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsSJExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//// Right associativity
		///* */ SJSelectionExpression SJExpression:
		//	SJTerminalExpression ({SJMemberSelection.receiver=current} '.'
		//	member=[SJMember] (methodinvocation?='(' (args+=SJExpression (',' args+=SJExpression)*)? ')')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SJTerminalExpression ({SJMemberSelection.receiver=current} '.' member=[SJMember] (methodinvocation?='('
		//(args+=SJExpression (',' args+=SJExpression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//SJTerminalExpression
		public RuleCall getSJTerminalExpressionParserRuleCall_0() { return cSJTerminalExpressionParserRuleCall_0; }
		
		//({SJMemberSelection.receiver=current} '.' member=[SJMember] (methodinvocation?='(' (args+=SJExpression (','
		//args+=SJExpression)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SJMemberSelection.receiver=current}
		public Action getSJMemberSelectionReceiverAction_1_0() { return cSJMemberSelectionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//member=[SJMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }
		
		//[SJMember]
		public CrossReference getMemberSJMemberCrossReference_1_2_0() { return cMemberSJMemberCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMemberSJMemberIDTerminalRuleCall_1_2_0_1() { return cMemberSJMemberIDTerminalRuleCall_1_2_0_1; }
		
		//(methodinvocation?='(' (args+=SJExpression (',' args+=SJExpression)*)? ')')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//methodinvocation?='('
		public Assignment getMethodinvocationAssignment_1_3_0() { return cMethodinvocationAssignment_1_3_0; }
		
		//'('
		public Keyword getMethodinvocationLeftParenthesisKeyword_1_3_0_0() { return cMethodinvocationLeftParenthesisKeyword_1_3_0_0; }
		
		//(args+=SJExpression (',' args+=SJExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//args+=SJExpression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }
		
		//SJExpression
		public RuleCall getArgsSJExpressionParserRuleCall_1_3_1_0_0() { return cArgsSJExpressionParserRuleCall_1_3_1_0_0; }
		
		//(',' args+=SJExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }
		
		//args+=SJExpression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }
		
		//SJExpression
		public RuleCall getArgsSJExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsSJExpressionParserRuleCall_1_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}
	public class SJTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smalljava.SmallJava.SJTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSJThisAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cThisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSJNullAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNullKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSJSymbolRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSymbolAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSymbolSJSymbolCrossReference_3_1_0 = (CrossReference)cSymbolAssignment_3_1.eContents().get(0);
		private final RuleCall cSymbolSJSymbolIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSymbolSJSymbolCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSJNewAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNewKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cTypeSJClassCrossReference_4_2_0 = (CrossReference)cTypeAssignment_4_2.eContents().get(0);
		private final RuleCall cTypeSJClassIDTerminalRuleCall_4_2_0_1 = (RuleCall)cTypeSJClassCrossReference_4_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cSJExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		///* 
		//SJSelectionExpression returns SJExpression:
		//	SJTerminalExpression
		//	(
		//		({SJMethodInvocation.receiver=current} '.'
		//			method=[SJMethod]
		//			'(' (args+=SJExpression(',' args+=SJExpression)*)? ')'
		//		) |
		//		({SJFieldSeleciton.receiver=current} '.' field = [SJField])
		//	)*
		//;
		//*/ SJTerminalExpression SJExpression:
		//	{SJThis} 'this' | {SJNull} 'null' | {BoolConstant} value=('true' | 'false') | {SJSymbolRef} symbol=[SJSymbol] |
		//	{SJNew} 'new' type=[SJClass] '(' ')' |
		//	'(' SJExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SJThis} 'this' | {SJNull} 'null' | {BoolConstant} value=('true' | 'false') | {SJSymbolRef} symbol=[SJSymbol] | {SJNew}
		//'new' type=[SJClass] '(' ')' | '(' SJExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SJThis} 'this'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SJThis}
		public Action getSJThisAction_0_0() { return cSJThisAction_0_0; }
		
		//'this'
		public Keyword getThisKeyword_0_1() { return cThisKeyword_0_1; }
		
		//{SJNull} 'null'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SJNull}
		public Action getSJNullAction_1_0() { return cSJNullAction_1_0; }
		
		//'null'
		public Keyword getNullKeyword_1_1() { return cNullKeyword_1_1; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{SJSymbolRef} symbol=[SJSymbol]
		public Group getGroup_3() { return cGroup_3; }
		
		//{SJSymbolRef}
		public Action getSJSymbolRefAction_3_0() { return cSJSymbolRefAction_3_0; }
		
		//symbol=[SJSymbol]
		public Assignment getSymbolAssignment_3_1() { return cSymbolAssignment_3_1; }
		
		//[SJSymbol]
		public CrossReference getSymbolSJSymbolCrossReference_3_1_0() { return cSymbolSJSymbolCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSymbolSJSymbolIDTerminalRuleCall_3_1_0_1() { return cSymbolSJSymbolIDTerminalRuleCall_3_1_0_1; }
		
		//{SJNew} 'new' type=[SJClass] '(' ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{SJNew}
		public Action getSJNewAction_4_0() { return cSJNewAction_4_0; }
		
		//'new'
		public Keyword getNewKeyword_4_1() { return cNewKeyword_4_1; }
		
		//type=[SJClass]
		public Assignment getTypeAssignment_4_2() { return cTypeAssignment_4_2; }
		
		//[SJClass]
		public CrossReference getTypeSJClassCrossReference_4_2_0() { return cTypeSJClassCrossReference_4_2_0; }
		
		//ID
		public RuleCall getTypeSJClassIDTerminalRuleCall_4_2_0_1() { return cTypeSJClassIDTerminalRuleCall_4_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_3() { return cLeftParenthesisKeyword_4_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'(' SJExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//SJExpression
		public RuleCall getSJExpressionParserRuleCall_5_1() { return cSJExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	
	
	private final SJProgramElements pSJProgram;
	private final SJClassElements pSJClass;
	private final SJMemberElements pSJMember;
	private final SJTypedDeclarationElements pSJTypedDeclaration;
	private final SJFieldElements pSJField;
	private final SJMethodElements pSJMethod;
	private final SJParameterElements pSJParameter;
	private final SJBlockElements pSJBlock;
	private final SJStatementElements pSJStatement;
	private final SJReturnElements pSJReturn;
	private final SJVariableDeclarationElements pSJVariableDeclaration;
	private final SJIfStatementElements pSJIfStatement;
	private final SJIfBlockElements pSJIfBlock;
	private final SJSymbolElements pSJSymbol;
	private final SJNamedElementElements pSJNamedElement;
	private final SJExpressionElements pSJExpression;
	private final SJAssignmentElements pSJAssignment;
	private final SJSelectionExpressionElements pSJSelectionExpression;
	private final SJTerminalExpressionElements pSJTerminalExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallJavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSJProgram = new SJProgramElements();
		this.pSJClass = new SJClassElements();
		this.pSJMember = new SJMemberElements();
		this.pSJTypedDeclaration = new SJTypedDeclarationElements();
		this.pSJField = new SJFieldElements();
		this.pSJMethod = new SJMethodElements();
		this.pSJParameter = new SJParameterElements();
		this.pSJBlock = new SJBlockElements();
		this.pSJStatement = new SJStatementElements();
		this.pSJReturn = new SJReturnElements();
		this.pSJVariableDeclaration = new SJVariableDeclarationElements();
		this.pSJIfStatement = new SJIfStatementElements();
		this.pSJIfBlock = new SJIfBlockElements();
		this.pSJSymbol = new SJSymbolElements();
		this.pSJNamedElement = new SJNamedElementElements();
		this.pSJExpression = new SJExpressionElements();
		this.pSJAssignment = new SJAssignmentElements();
		this.pSJSelectionExpression = new SJSelectionExpressionElements();
		this.pSJTerminalExpression = new SJTerminalExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.smalljava.SmallJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SJProgram:
	//	classes+=SJClass*;
	public SJProgramElements getSJProgramAccess() {
		return pSJProgram;
	}
	
	public ParserRule getSJProgramRule() {
		return getSJProgramAccess().getRule();
	}
	
	//SJClass:
	//	'class' name=ID ('extends' superclass=[SJClass])?
	//	'{' members+=SJMember* '}';
	public SJClassElements getSJClassAccess() {
		return pSJClass;
	}
	
	public ParserRule getSJClassRule() {
		return getSJClassAccess().getRule();
	}
	
	//SJMember:
	//	SJField | SJMethod;
	public SJMemberElements getSJMemberAccess() {
		return pSJMember;
	}
	
	public ParserRule getSJMemberRule() {
		return getSJMemberAccess().getRule();
	}
	
	//fragment SJTypedDeclaration *:
	//	type=[SJClass] name=ID;
	public SJTypedDeclarationElements getSJTypedDeclarationAccess() {
		return pSJTypedDeclaration;
	}
	
	public ParserRule getSJTypedDeclarationRule() {
		return getSJTypedDeclarationAccess().getRule();
	}
	
	//SJField:
	//	SJTypedDeclaration ';';
	public SJFieldElements getSJFieldAccess() {
		return pSJField;
	}
	
	public ParserRule getSJFieldRule() {
		return getSJFieldAccess().getRule();
	}
	
	//SJMethod:
	//	SJTypedDeclaration
	//	'(' (params+=SJParameter (',' params+=SJParameter)*)?
	//	')' body=SJBlock;
	public SJMethodElements getSJMethodAccess() {
		return pSJMethod;
	}
	
	public ParserRule getSJMethodRule() {
		return getSJMethodAccess().getRule();
	}
	
	//SJParameter:
	//	SJTypedDeclaration;
	public SJParameterElements getSJParameterAccess() {
		return pSJParameter;
	}
	
	public ParserRule getSJParameterRule() {
		return getSJParameterAccess().getRule();
	}
	
	//SJBlock:
	//	{SJBlock} '{' statements+=SJStatement* '}';
	public SJBlockElements getSJBlockAccess() {
		return pSJBlock;
	}
	
	public ParserRule getSJBlockRule() {
		return getSJBlockAccess().getRule();
	}
	
	//SJStatement:
	//	SJVariableDeclaration | SJReturn | SJExpression ';' | SJIfStatement;
	public SJStatementElements getSJStatementAccess() {
		return pSJStatement;
	}
	
	public ParserRule getSJStatementRule() {
		return getSJStatementAccess().getRule();
	}
	
	//SJReturn:
	//	'return' expression=SJExpression ';';
	public SJReturnElements getSJReturnAccess() {
		return pSJReturn;
	}
	
	public ParserRule getSJReturnRule() {
		return getSJReturnAccess().getRule();
	}
	
	//SJVariableDeclaration:
	//	SJTypedDeclaration '=' expression=SJExpression ';';
	public SJVariableDeclarationElements getSJVariableDeclarationAccess() {
		return pSJVariableDeclaration;
	}
	
	public ParserRule getSJVariableDeclarationRule() {
		return getSJVariableDeclarationAccess().getRule();
	}
	
	//SJIfStatement:
	//	'if' '(' expression=SJExpression ')' thenBlock=SJIfBlock (=> 'else' elseBlock=SJIfBlock)?;
	public SJIfStatementElements getSJIfStatementAccess() {
		return pSJIfStatement;
	}
	
	public ParserRule getSJIfStatementRule() {
		return getSJIfStatementAccess().getRule();
	}
	
	//SJIfBlock SJBlock:
	//	statements+=SJStatement
	//	| SJBlock;
	public SJIfBlockElements getSJIfBlockAccess() {
		return pSJIfBlock;
	}
	
	public ParserRule getSJIfBlockRule() {
		return getSJIfBlockAccess().getRule();
	}
	
	//SJSymbol:
	//	SJVariableDeclaration | SJParameter;
	public SJSymbolElements getSJSymbolAccess() {
		return pSJSymbol;
	}
	
	public ParserRule getSJSymbolRule() {
		return getSJSymbolAccess().getRule();
	}
	
	//SJNamedElement:
	//	SJClass | SJMember | SJSymbol;
	public SJNamedElementElements getSJNamedElementAccess() {
		return pSJNamedElement;
	}
	
	public ParserRule getSJNamedElementRule() {
		return getSJNamedElementAccess().getRule();
	}
	
	//SJExpression:
	//	SJAssignment;
	public SJExpressionElements getSJExpressionAccess() {
		return pSJExpression;
	}
	
	public ParserRule getSJExpressionRule() {
		return getSJExpressionAccess().getRule();
	}
	
	//SJAssignment SJExpression:
	//	SJSelectionExpression ({SJAssignment.left=current} '=' right=SJExpression)?;
	public SJAssignmentElements getSJAssignmentAccess() {
		return pSJAssignment;
	}
	
	public ParserRule getSJAssignmentRule() {
		return getSJAssignmentAccess().getRule();
	}
	
	//// Right associativity
	///* */ SJSelectionExpression SJExpression:
	//	SJTerminalExpression ({SJMemberSelection.receiver=current} '.'
	//	member=[SJMember] (methodinvocation?='(' (args+=SJExpression (',' args+=SJExpression)*)? ')')?)*;
	public SJSelectionExpressionElements getSJSelectionExpressionAccess() {
		return pSJSelectionExpression;
	}
	
	public ParserRule getSJSelectionExpressionRule() {
		return getSJSelectionExpressionAccess().getRule();
	}
	
	///* 
	//SJSelectionExpression returns SJExpression:
	//	SJTerminalExpression
	//	(
	//		({SJMethodInvocation.receiver=current} '.'
	//			method=[SJMethod]
	//			'(' (args+=SJExpression(',' args+=SJExpression)*)? ')'
	//		) |
	//		({SJFieldSeleciton.receiver=current} '.' field = [SJField])
	//	)*
	//;
	//*/ SJTerminalExpression SJExpression:
	//	{SJThis} 'this' | {SJNull} 'null' | {BoolConstant} value=('true' | 'false') | {SJSymbolRef} symbol=[SJSymbol] |
	//	{SJNew} 'new' type=[SJClass] '(' ')' |
	//	'(' SJExpression ')';
	public SJTerminalExpressionElements getSJTerminalExpressionAccess() {
		return pSJTerminalExpression;
	}
	
	public ParserRule getSJTerminalExpressionRule() {
		return getSJTerminalExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
