/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.smalljava.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.smalljava.SmallJavaModelUtil;
import org.xtext.example.smalljava.smallJava.SJAssignment;
import org.xtext.example.smalljava.smallJava.SJBlock;
import org.xtext.example.smalljava.smallJava.SJClass;
import org.xtext.example.smalljava.smallJava.SJExpression;
import org.xtext.example.smalljava.smallJava.SJField;
import org.xtext.example.smalljava.smallJava.SJIfStatement;
import org.xtext.example.smalljava.smallJava.SJMemberSelection;
import org.xtext.example.smalljava.smallJava.SJMethod;
import org.xtext.example.smalljava.smallJava.SJNew;
import org.xtext.example.smalljava.smallJava.SJNull;
import org.xtext.example.smalljava.smallJava.SJParameter;
import org.xtext.example.smalljava.smallJava.SJProgram;
import org.xtext.example.smalljava.smallJava.SJReturn;
import org.xtext.example.smalljava.smallJava.SJStatement;
import org.xtext.example.smalljava.smallJava.SJSymbolRef;
import org.xtext.example.smalljava.smallJava.SJThis;
import org.xtext.example.smalljava.smallJava.SJVariableDeclaration;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmallJavaGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private SmallJavaModelUtil _smallJavaModelUtil;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final SJProgram program = IterableExtensions.<SJProgram>head(Iterables.<SJProgram>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), SJProgram.class));
    if ((program == null)) {
      return;
    }
    EList<SJClass> _classes = program.getClasses();
    for (final SJClass smallJavaClass : _classes) {
      String _replace = this._iQualifiedNameProvider.getFullyQualifiedName(smallJavaClass).toString().replace(".", "/");
      String _plus = (_replace + ".java");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package smalljava.example");
      _builder.newLine();
      _builder.append("public class ");
      String _name = smallJavaClass.getName();
      _builder.append(_name);
      _builder.append(" ");
      {
        SJClass _superclass = smallJavaClass.getSuperclass();
        boolean _tripleNotEquals = (_superclass != null);
        if (_tripleNotEquals) {
          _builder.newLineIfNotEmpty();
          _builder.append("extends ");
          String _compileTypeReference = this.compileTypeReference(smallJavaClass.getSuperclass());
          _builder.append(_compileTypeReference);
          _builder.append(" ");
        }
      }
      _builder.append("{");
      _builder.newLineIfNotEmpty();
      {
        Iterable<SJField> _fields = this._smallJavaModelUtil.fields(smallJavaClass);
        for(final SJField field : _fields) {
          _builder.append("\t");
          _builder.append("public ");
          String _compileTypeReference_1 = this.compileTypeReference(field.getType());
          _builder.append(_compileTypeReference_1, "\t");
          _builder.append(" ");
          String _name_1 = field.getName();
          _builder.append(_name_1, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        Iterable<SJMethod> _methods = this._smallJavaModelUtil.methods(smallJavaClass);
        for(final SJMethod method : _methods) {
          _builder.append("\t");
          _builder.append("public ");
          String _compileTypeReference_2 = this.compileTypeReference(method.getType());
          _builder.append(_compileTypeReference_2, "\t");
          _builder.append(" ");
          String _name_2 = method.getName();
          _builder.append(_name_2, "\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("(");
          final Function1<SJParameter, CharSequence> _function = (SJParameter it) -> {
            return this.compileParam(it);
          };
          String _join = IterableExtensions.join(ListExtensions.<SJParameter, CharSequence>map(method.getParams(), _function), ", ");
          _builder.append(_join, "\t");
          _builder.append(") ");
          CharSequence _compileBlock = this.compileBlock(method.getBody());
          _builder.append(_compileBlock, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("}");
      _builder.newLine();
      fsa.generateFile(_plus, _builder);
    }
  }
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public String compileTypeReference(final SJClass c) {
    return this._iQualifiedNameProvider.getFullyQualifiedName(c).toString();
  }
  
  public CharSequence compileParam(final SJParameter p) {
    StringConcatenation _builder = new StringConcatenation();
    String _compileTypeReference = this.compileTypeReference(p.getType());
    _builder.append(_compileTypeReference);
    _builder.append(" ");
    String _name = p.getName();
    _builder.append(_name);
    return _builder;
  }
  
  public CharSequence compileBlock(final SJBlock block) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<SJStatement> _statements = block.getStatements();
      for(final SJStatement s : _statements) {
        _builder.append("\t");
        String _compileStatement = this.compileStatement(s);
        _builder.append(_compileStatement, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String compileStatement(final SJStatement s) {
    String _switchResult = null;
    boolean _matched = false;
    if (s instanceof SJVariableDeclaration) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      String _compileTypeReference = this.compileTypeReference(((SJVariableDeclaration)s).getType());
      _builder.append(_compileTypeReference);
      _builder.append(" ");
      String _name = ((SJVariableDeclaration)s).getName();
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t ");
      _builder.append("= ");
      String _compileExpression = this.compileExpression(((SJVariableDeclaration)s).getExpression());
      _builder.append(_compileExpression, "\t\t\t ");
      _builder.append(";");
      _switchResult = _builder.toString();
    }
    if (!_matched) {
      if (s instanceof SJReturn) {
        _matched=true;
        String _compileExpression = this.compileExpression(((SJReturn)s).getExpression());
        String _plus = ("return " + _compileExpression);
        _switchResult = (_plus + ";");
      }
    }
    if (!_matched) {
      if (s instanceof SJIfStatement) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("if (");
        String _compileExpression = this.compileExpression(((SJIfStatement)s).getExpression());
        _builder.append(_compileExpression);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileBlock = this.compileBlock(((SJIfStatement)s).getThenBlock());
        _builder.append(_compileBlock, "\t");
        _builder.newLineIfNotEmpty();
        {
          SJBlock _elseBlock = ((SJIfStatement)s).getElseBlock();
          boolean _tripleNotEquals = (_elseBlock != null);
          if (_tripleNotEquals) {
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            CharSequence _compileBlock_1 = this.compileBlock(((SJIfStatement)s).getElseBlock());
            _builder.append(_compileBlock_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      String _compileExpression = this.compileExpression(s);
      _switchResult = (_compileExpression + ";");
    }
    return _switchResult;
  }
  
  public String compileExpression(final SJStatement s) {
    String _switchResult = null;
    boolean _matched = false;
    if (s instanceof SJNull) {
      _matched=true;
      _switchResult = "null";
    }
    if (!_matched) {
      if (s instanceof SJThis) {
        _matched=true;
        _switchResult = "this";
      }
    }
    if (!_matched) {
      if (s instanceof SJSymbolRef) {
        _matched=true;
        _switchResult = ((SJSymbolRef)s).getSymbol().getName();
      }
    }
    if (!_matched) {
      if (s instanceof SJNew) {
        _matched=true;
        String _compileTypeReference = this.compileTypeReference(((SJNew)s).getType());
        String _plus = ("new " + _compileTypeReference);
        _switchResult = (_plus + "()");
      }
    }
    if (!_matched) {
      if (s instanceof SJAssignment) {
        _matched=true;
        String _compileExpression = this.compileExpression(((SJAssignment)s).getLeft());
        String _plus = (_compileExpression + " = ");
        String _compileExpression_1 = this.compileExpression(((SJAssignment)s).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (s instanceof SJMemberSelection) {
        _matched=true;
        String _compileExpression = this.compileExpression(((SJMemberSelection)s).getReceiver());
        String _plus = (_compileExpression + ".");
        String _name = ((SJMemberSelection)s).getMember().getName();
        String _plus_1 = (_plus + _name);
        String _xifexpression = null;
        boolean _isMethodinvocation = ((SJMemberSelection)s).isMethodinvocation();
        if (_isMethodinvocation) {
          final Function1<SJExpression, String> _function = (SJExpression it) -> {
            return this.compileExpression(it);
          };
          String _join = IterableExtensions.join(ListExtensions.<SJExpression, String>map(((SJMemberSelection)s).getArgs(), _function), ", ");
          String _plus_2 = ("(" + _join);
          _xifexpression = (_plus_2 + ")");
        } else {
          _xifexpression = "";
        }
        _switchResult = (_plus_1 + _xifexpression);
      }
    }
    return _switchResult;
  }
}
