/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.smalljava.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.example.smalljava.SmallJavaStandaloneSetup;

@SuppressWarnings("all")
public class Main {
  public static void main(final String[] args) {
    boolean _isEmpty = ((List<String>)Conversions.doWrapArray(args)).isEmpty();
    if (_isEmpty) {
      System.err.println("Aborting: no path to EMF resource provided!");
      return;
    }
    final Injector injector = new SmallJavaStandaloneSetup().createInjectorAndDoEMFRegistration();
    final Main main = injector.<Main>getInstance(Main.class);
    main.runGenerator(args);
  }
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  @Inject
  private IResourceValidator validator;
  
  @Inject
  private GeneratorDelegate generator;
  
  @Inject
  private JavaIoFileSystemAccess fileAccess;
  
  protected void runGenerator(final String[] strings) {
    final ResourceSet set = this.resourceSetProvider.get();
    this.fileAccess.setOutputPath("src-gen/");
    GeneratorContext _generatorContext = new GeneratorContext();
    final Procedure1<GeneratorContext> _function = (GeneratorContext it) -> {
      it.setCancelIndicator(CancelIndicator.NullImpl);
    };
    final GeneratorContext context = ObjectExtensions.<GeneratorContext>operator_doubleArrow(_generatorContext, _function);
    final Consumer<String> _function_1 = (String s) -> {
      set.getResource(URI.createFileURI(s), true);
    };
    ((List<String>)Conversions.doWrapArray(strings)).forEach(_function_1);
    boolean ok = true;
    EList<Resource> _resources = set.getResources();
    for (final Resource resource : _resources) {
      {
        URI _uRI = resource.getURI();
        String _plus = ("Compiling " + _uRI);
        String _plus_1 = (_plus + "...");
        InputOutput.<String>println(_plus_1);
        final List<Issue> issues = this.validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
        boolean _isEmpty = issues.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          for (final Issue issue : issues) {
            System.err.println(issue);
          }
          ok = false;
        } else {
          this.generator.generate(resource, this.fileAccess, context);
        }
      }
    }
    if (ok) {
      System.out.println("Programs well-typed.");
    }
  }
}
